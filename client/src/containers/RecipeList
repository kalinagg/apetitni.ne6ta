// import React, {Component} from 'react';
// import {Route} from 'react-router-dom';
// import Recipe from '../components/recipe/Recipe';
// import IRecipe from '../components/recipe/IRecipe';
// import SnackbarMessage, {SnackbarSeverity, Severity} from '../snackbar/SnackbarMessage';
// import IApp from './IApp';
// import List from '../components/list/List';
// import history from '../history';
// import newRecipeImageUrl from '../new-recipe.jpg';
// import RecipeManagerClient from '../RecipeManagerClient';
// import { CircularProgress } from '@material-ui/core';
// import { fetchRecipes, selectRecipe } from '../actions';
// import { connect } from 'react-redux';

// const recipeManagerClient = new RecipeManagerClient();

// class RecipeList extends Component<any, IApp> {
//     constructor(props) {
//         super(props);
        // console.log(props);
                
        // this.state = {
        //     isLoaded: false,
        //     recipes: [],
        //     snackbarOpen: false, 
        //     snackbarSeverity: SnackbarSeverity.Error,
        //     snackbarMessage: '',
        //     snackbarUndo: false
        // };

        // this.saveRecipe = this.saveRecipe.bind(this);
        // this.deleteRecipe = this.deleteRecipe.bind(this);
        // this.addRecipe = this.addRecipe.bind(this); 
        // this.closeSnackbar = this.closeSnackbar.bind(this);
        // this.getRecipeById = this.getRecipeById.bind(this);
    // }

    // componentDidMount() {
    //     const {recipes, fetchRecipes} = this.props;        
    //     fetchRecipes(recipes);        
    // }

    // async showRecipes(): Promise<void> {
    //     try {
    //         this.setState({
    //             isLoaded: true,
    //             recipes: await recipeManagerClient.getRecipes()
    //         });
    //     } catch(err) {
    //         console.log(err);
    //     }
    // }

    // openSnackbar(severity: Severity, message: string, undo: boolean) {
    //     this.setState({
    //         snackbarOpen: true,
    //         snackbarSeverity: severity,
    //         snackbarMessage: message,
    //         snackbarUndo: undo
    //     });
    // }

    // closeSnackbar() {   
    //     this.setState({
    //         snackbarOpen: false
    //     }); 
    // }

    // async saveRecipe(recipe: IRecipe): Promise<void> {
    //     const {recipes} = this.state;
    //     const isRecipeNew = recipe.id === '';

    //     if (isRecipeNew) {
    //         try {
    //             recipe.id = await recipeManagerClient.upsertRecipe(recipe);
    //             const newRecipes = [recipe, ...recipes];

    //             this.setState({
    //                 recipes: newRecipes
    //             });

    //             history.push(`/recipe/${recipe.id}`);
    //             this.openSnackbar('success', 'Recipe saved.', false);
    //             return;
    //         } catch(err) {
    //             this.openSnackbar('error', `${err.message}`, false);
    //         }
    //     }
        
    //     try {
    //         const recipeIndex = recipes.findIndex(r => r.id === recipe.id);

    //         if (recipeIndex < 0) {
    //             throw new Error('Recipe not found:' + recipe.id);
    //         }
    
    //         await recipeManagerClient.upsertRecipe(recipe);
    
    //         const newRecipe = {...recipe};
    //         const newRecipes = [...recipes];
    //         newRecipes.splice(recipeIndex, 1, newRecipe);
    
    //         this.setState({
    //             recipes: newRecipes
    //         });
    
    //         this.openSnackbar('success', 'Recipe saved.', false);
    //     } catch(err) {
    //         this.openSnackbar('error', `${err.message}`, false);
    //     }
    // }

    // async addRecipe(): Promise<void> {
    //     const newRecipe = {
    //         id: '',
    //         title: '',
    //         instructions: '',
    //         img: newRecipeImageUrl,
    //         ingredients: ''
    //     };
        
    //     this.setState({
    //         recipes: [newRecipe, ...this.state.recipes]
    //     });
    // }
    
    // async deleteRecipe(id: string): Promise<void> {
    //     try {
    //         if (typeof id !== 'string') {
    //             throw new Error(`RecipeId should be a string and not ${typeof id}.`);
    //         }
    
    //         await recipeManagerClient.deleteRecipe(id);
    
    //         const newRecipes = this.state.recipes.filter(r => r.id !== id);
    //         this.setState({
    //             recipes: newRecipes
    //         });
    
    //         history.push('/');
    //         this.openSnackbar('success', 'Recipe deleted.', true);
    //     } catch(err) {
    //         this.openSnackbar('error', `${err.message}`, false);
    //     }
    // }

    // getRecipeById(id: string): IRecipe {
    //     console.log(this);
    //     const found = this.props.recipes.filter(r => r.id === id);

    //     if (!found.length) {
    //         throw new Error(`Recipe not found: ${id}.`);
    //     }

    //     return found[0];
    // }

    // render() {
    //     const {error, isLoaded, recipes, selectedRecipe, selectRecipe} = this.props;
        
        // if (error) {
        //     return <div>Error: {error.message}</div>;
        // }
        
        // if (!isLoaded) {
        //     return (
        //         <div className="recipe-list-process-icon">
        //             <CircularProgress color="inherit" />
        //         </div>
        //     )
        // }
        
//         return (
//             <React.Fragment>
//                 <Route exact path="/">
//                     <List recipes={recipes} selectRecipe={selectRecipe} />                    
//                 </Route>  
//                 <Route path="/recipe/:id" render={props =>                   
//                     (<Recipe
//                         {...props}
//                         selectedRecipe={selectedRecipe}
//                         // saveRecipe={this.saveRecipe}
//                         // deleteRecipe={this.deleteRecipe}
//                     />)}
//                 />
//                 {/* <SnackbarMessage
//                     open={this.state.snackbarOpen}
//                     severity={this.state.snackbarSeverity}
//                     message={this.state.snackbarMessage}
//                     undo={this.state.snackbarUndo}
//                     closeSnackbar={this.closeSnackbar} /> */}
//             </React.Fragment>
//         )
//     }
// }

// const mapStateToProps = state => {
//     const {isLoaded, recipes, selectedRecipe} = state.recipesReducer;

//     return {
//         isLoaded,
//         recipes,
//         selectedRecipe
//     }
// }

// const mapDispatchToProps = dispatch => ({
//     fetchRecipes: recipes => dispatch(fetchRecipes(recipes)),
//     selectRecipe: recipeId => dispatch(selectRecipe(recipeId))
// });

// export default connect(mapStateToProps, mapDispatchToProps)(RecipeList);